":";exec racket -f $0 -m -- "$@"

(define (read-word i)
  (let loop ((r '()))
    (let ((c (peek-char i)))
      (if (char-alphabetic? c)
          (loop (cons (read-char i) r))
          (if (null? r) #f
              (list->string (reverse r)))))))

(define (read-group i)
  (let ((c (read-char i)))
    (if (char=? c #\{)
      (let loop ((r '()) (in-space? #t))
        (let ((c (read-char i)))
          (cond ((member c '(#\space #\tab #\newline #\return))
                 (loop (if in-space? r (cons #\space r)) #t))
                ((char=? c #\})
                 (string-trim (list->string (reverse r))))
                (else (loop (cons c r) #f)))))
        "")))

(define (assoc-glossary term L)
  ;(printf "doing assoc-glossary ~s ~n" term)
  (let ((stupid-singular (if (char-ci=? (string-ref term (- (string-length term) 1)) #\s)
                             (substring term 0 (- (string-length term) 1))
                             "")))
    ;(printf "stupid sing = ~s~n" stupid-singular)
    (let loop ((L L))
      (if (null? L) #f
          (let* ((c (car L))
                 (lhs (car c)))
            ;(printf "lhs = ~s~n" lhs)
            (or (cond ((string? lhs)
                       (and (or (string-ci=? lhs term)
                                (string-ci=? lhs stupid-singular)) c))
                      ((list? lhs)
                       (and (memf (lambda (x) (string-ci=? x term)) lhs) (list (car lhs) (cadr c))))
                      (else #f))
                (loop (cdr L))))))))

(define (check-first-subsection i o)
  (let ((c (peek-char i)))
    (if (char=? c #\=)
        (begin (read-char i)
               (set! c (peek-char i))
               (if (char=? c #\=)
                   #t
                   (begin (display #\= o)
                          #f)))
        #f)))

(define (add-include-directive i o in-file)
  (display "include::" o)
  (display (path-replace-extension in-file "-glossary.adoc") o)
  (display "[]" o)
  (newline o) (newline o)
  (display #\= o))

(define (insert-metadata in-file)
  (let ((out-file (path-replace-extension in-file ".sadoc"))
        (glossary-list (call-with-input-file "glossary-terms.rkt" read))
        (glossary-out-file (path-replace-extension in-file "-glossary.adoc"))
        (glossary-items '())
        ;(standards-file "standards.rkt")
        ;(materials '())
        ;(preparation-items '())
        (first-subsection-crossed? #f)
        )
    (call-with-input-file in-file
      (lambda (i)
        (call-with-output-file glossary-out-file
          (lambda (g)
            (call-with-output-file out-file
              (lambda (o)
                (let loop ()
                  (let ((c (read-char i)))
                    (unless (eof-object? c)
                      (case c
                        ((#\@)
                         (let ((directive (read-word i)))
                           ;(printf "directive= ~s~%" directive)
                           (cond (directive
                                   (let ((arg (read-group i)))
                                     ;(printf "arg -> ~s~%" arg)
                                     (cond ((string=? directive "vocab")
                                            (let ((s (assoc-glossary arg glossary-list)))
                                              (display "* *" g)
                                              (display (car s) g)
                                              (display "*: " g)
                                              (display (cadr s) g)
                                              (newline g)))
                                           (else  #f))))
                                 (else (display c o)))))
                        ((#\newline)
                         (newline o)
                         (cond (first-subsection-crossed? #f)
                               ((check-first-subsection i o)
                                (set! first-subsection-crossed? #t)
                                (add-include-directive i o in-file))
                               (else #f)))
                        (else (display c o)))
                      (loop)))))
              #:exists 'replace))
          #:exists 'replace)))
    (system (format "asciidoctor ~a" out-file))))

(define (main . args)
  (insert-metadata (and (>= (length args) 1) (list-ref args 0)))
  (void))
